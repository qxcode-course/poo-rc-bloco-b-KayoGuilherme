{
    "patches": [
        {
            "label": "2025-10-27_22-03-23",
            "content": "@@ -1109,34 +1109,45 @@\n    print(%22fail: \n-no\n+already has a\n  driver%22)%0A      \n@@ -1293,24 +1293,26 @@\n l: n\n-a\n o \n-tem motorista\n+driver to remove\n %22)%0A \n@@ -1479,30 +1479,39 @@\n (%22fail: \n-tem passageiro\n+already has a passenger\n %22)%0A     \n@@ -1783,20 +1783,19 @@\n l: n\n-a\n o \n-tem passa\n+passenger\n %22)%0A \n@@ -2178,37 +2178,28 @@\n l: n\n-ao ha passageiro para dirigir\n+o passenger to drive\n %22)%0A \n@@ -2354,25 +2354,19 @@\n l: n\n-%C3%A3o tem passageiro\n+o passenger\n %22)%0A \n@@ -2518,17 +2518,17 @@\n (%22fail: \n-P\n+p\n assenger\n@@ -2532,19 +2532,18 @@\n ger does\n- no\n+n'\n t have e\n@@ -3016,32 +3016,32 @@\n ger else %22None%22%0A\n+\n         return f\n@@ -3113,1197 +3113,4 @@\n r%7D%22%0A\n-%0Adef main():%0A    cycle = Cycle()%0A    people = %7B%7D%0A%0A    while True:%0A        line = input()%0A        print(%22$%22 + line)%0A        args = line.split()%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22setDriver%22:%0A            name = args%5B1%5D%0A            money = float(args%5B2%5D)%0A            if name not in people:%0A                people%5Bname%5D = People(name, money)%0A            cycle.setDriver(people%5Bname%5D)%0A%0A        elif args%5B0%5D == %22mountDriver%22:%0A            name = args%5B1%5D%0A            money = float(args%5B2%5D)%0A            if name not in people:%0A                people%5Bname%5D = People(name, money)%0A            cycle.mountDriver(people%5Bname%5D)%0A%0A        elif args%5B0%5D == %22dismountDriver%22:%0A            cycle.dismountDriver()%0A%0A        elif args%5B0%5D == %22setPass%22:%0A            name = args%5B1%5D%0A            money = float(args%5B2%5D)%0A            if name not in people:%0A                people%5Bname%5D = People(name, money)%0A            cycle.mountPassenger(people%5Bname%5D)%0A%0A        elif args%5B0%5D == %22leavePass%22:%0A            cycle.leavePassenger()%0A%0A        elif args%5B0%5D == %22drive%22:%0A            km = float(args%5B1%5D)%0A            cycle.drive(km)%0A%0A        elif args%5B0%5D == %22show%22:%0A            print(cycle)%0A%0Amain()%0A\n",
            "lines": "106"
        },
        {
            "label": "2025-10-27_22-06-47",
            "content": "@@ -2624,25 +2624,20 @@\n receive(\n-totalCost\n+paid\n )%0A%0A     \n",
            "lines": "154"
        },
        {
            "label": "2025-10-27_22-20-41",
            "content": "class People:\n    def __init__(self, name: str, money: float) -> None:\n        self.__name: str = name\n        self.__money: float = money\n\n    def __str__(self) -> str:\n        if self.__money.is_integer():\n            return f\"{self.__name}:{int(self.__money)}\"\n        else:\n            return f\"{self.__name}:{self.__money:.2f}\"\n\n    def getName(self) -> str:\n        return self.__name\n\n    def getMoney(self) -> float:\n        return self.__money\n\n    def pay(self, value: float) -> float:\n        if self.__money >= value:\n            self.__money -= value\n            return value\n        else:\n            paid = self.__money\n            self.__money = 0\n            return paid\n\n    def receive(self, value: float) -> None:\n        self.__money += value\n\n\nclass Cycle:\n    def __init__(self) -> None:\n        self.__cost = 0.0\n        self.__passenger: People | None = None\n        self.__driver: People | None = None\n\n    def setDriver(self, person: People) -> None:\n        self.__driver = person\n\n    def mountDriver(self, person: People) -> None:\n        if self.__driver is not None:\n            print(\"fail: no driver\")\n            return\n        self.__driver = person\n\n    def dismountDriver(self) -> None:\n        if self.__driver is None:\n            print(\"fail: nao tem motorista\")\n            return\n        self.__driver = None\n\n    def mountPassenger(self, person: People) -> None:\n        if self.__passenger is not None:\n            print(\"fail: tem passageiro\")\n            return\n        if self.__driver is None:\n            print(\"fail: no driver\")\n            return\n        self.__passenger = person\n        self.__cost = 0.0\n\n    def dismountPassenger(self) -> None:\n        if self.__passenger is None:\n            print(\"fail: nao tem passa\")\n            return\n\n        payment = self.__cost\n        if self.__driver is not None:\n            self.__driver.receive(payment)\n\n        print(f\"{self.__passenger.getName()}:{int(self.__passenger.getMoney())} left\")\n        self.__passenger = None\n        self.__cost = 0.0\n\n    def drive(self, km: float) -> None:\n        if self.__passenger is None:\n            print(\"fail: nao ha passageiro para dirigir\")\n            return\n        self.__cost += km * 1.0\n\n    def leavePassenger(self) -> None:\n        if self.__passenger is None:\n            print(\"fail: n\u00e3o tem passageiro\")\n            return\n\n        totalCost = self.__cost\n        paid = self.__passenger.pay(totalCost)\n\n        if paid < totalCost:\n            print(\"fail: Passenger does not have enough money\")\n\n        if self.__driver is not None:\n            self.__driver.receive(totalCost)\n\n        print(f\"{self.__passenger.getName()}:{int(self.__passenger.getMoney())} left\")\n\n        self.__passenger = None\n        self.__cost = 0.0\n\n    def getDriver(self) -> People | None:\n        return self.__driver\n\n    def __str__(self) -> str:\n        driver = str(self.__driver) if self.__driver else \"None\"\n        passenger = str(self.__passenger) if self.__passenger else \"None\"\n        return f\"Cost: {int(self.__cost)}, Driver: {driver}, Passenger: {passenger}\"\n\ndef main():\n    cycle = Cycle()\n    people = {}\n\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split()\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"setDriver\":\n            name = args[1]\n            money = float(args[2])\n            if name not in people:\n                people[name] = People(name, money)\n            cycle.setDriver(people[name])\n\n        elif args[0] == \"mountDriver\":\n            name = args[1]\n            money = float(args[2])\n            if name not in people:\n                people[name] = People(name, money)\n            cycle.mountDriver(people[name])\n\n        elif args[0] == \"dismountDriver\":\n            cycle.dismountDriver()\n\n        elif args[0] == \"setPass\":\n            name = args[1]\n            money = float(args[2])\n            if name not in people:\n                people[name] = People(name, money)\n            cycle.mountPassenger(people[name])\n\n        elif args[0] == \"leavePass\":\n            cycle.leavePassenger()\n\n        elif args[0] == \"drive\":\n            km = float(args[1])\n            cycle.drive(km)\n\n        elif args[0] == \"show\":\n            print(cycle)\n\nmain()\n",
            "lines": "154"
        }
    ]
}