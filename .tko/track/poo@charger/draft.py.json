{
    "patches": [
        {
            "label": "2025-10-28_00-15-11",
            "content": "@@ -1,4323 +0,0 @@\n-class Battery:%0A    def __init__(self, capacity: int):%0A        self.__capacity = capacity%0A        self.__charge = capacity%0A    %0A    def getBattery(self):%0A        return f%22%7Bself.__charge%7D/%7Bself.__capacity%7D%22%0A    %0A    def usingBattery(self, time: int):%0A        self.__charge -=time%0A        if self.__charge %3C 0:%0A            self.__charge = 0%0A%0A    def carregar(self, power: int, time: int):%0A        self.__charge += power * time%0A        if self.__charge %3E self.__capacity:%0A            self.__charge = self.__capacity%0A%0A    def hasCharge(self):%0A        return self.__charge %3E 0%0A    %0A    def getCharge(self):%0A        return self.__charge%0A    %0A    def getCapacity(self):%0A        return self.__capacity%0A    %0Aclass Charger:%0A    def __init__(self, power: int):%0A        self.__power = power%0A    %0A    def getPower(self):%0A        return self.__power%0A%0Aclass Not:%0A    def __init__(self):%0A        self.__on = False%0A        self.__userTime = 0%0A        self.__battery: Battery %7C None = None%0A        self.__charger: Charger %7C None = None%0A%0A    def ligar(self):%0A        if (self.__battery and self.__battery.hasCharge()) or self.__charger:%0A            self.__on = True%0A        else:%0A            print(%22fail: n%C3%A3o foi poss%C3%ADvel ligar%22)%0A%0A    def desligar(self):%0A        if not self.__on:%0A            print(%22fail: j%C3%A1 desligado%22)%0A            return%0A        self.__on = False%0A    %0A    def setBateria(self, capacity: int):%0A        if self.__battery:%0A            print(%22fail: bateria ja conectada%22)%0A            return%0A        self.__battery = Battery(capacity)%0A%0A    def rmBateria(self):%0A        if not self.__battery:%0A            print(%22fail: Sem bateria%22)%0A            return%0A        print(f%22Removido %7Bself.__battery.getBattery()%7D%22)%0A        self.__battery = None%0A        if not self.__charger:%0A            self.__on = False%0A%0A    def setCarregador(self, power: int):%0A        if self.__charger:%0A            print(%22fail: carregador j%C3%A1 conectado%22)%0A            return%0A        self.__charger = Charger(power)%0A%0A    def rmCarregador(self):%0A        if not self.__charger:%0A            print(%22fail: Sem carregador%22)%0A            return%0A        %0A        print(f%22Removido %7Bself.__charger.getPower()%7DW%22)%0A        self.__charger = None%0A        if not self.__battery:%0A            self.__on = False%0A    %0A    def usar(self, time: int):%0A        if not self.__on:%0A            print(%22fail: desligado%22)%0A            return%0A        time = int(time)%0A        self.__userTime += time%0A        %0A        if self.__battery and self.__charger:%0A            self.__battery.carregar(self.__charger.getPower(), time)%0A        elif self.__battery:%0A            start_charge = self.__battery.getCharge()%0A            self.__battery.usingBattery(time)%0A            if not self.__battery.hasCharge():%0A                print(%22fail: descarregou%22)%0A                self.__on = False%0A                self.__userTime -= (time - start_charge)%0A        elif self.__charger:%0A            pass%0A        else:%0A            print(%22fail: desligado%22)%0A            self.__on = False%0A    %0A    def show(self):%0A        status = %22ligado%22 if self.__on else %22desligado%22%0A%0A        text = f%22Notebook: %7Bstatus%7D%22%0A        if self.__on:%0A            text += f%22 por %7Bself.__userTime%7D min%22%0A        %0A        parts = %5B%5D%0A        if self.__charger:%0A            parts.append(f%22Carregador %7Bself.__charger.getPower()%7DW%22)%0A        if self.__battery:%0A            parts.append(f%22Bateria %7Bself.__battery.getBattery()%7D%22)%0A        if parts:%0A            text += %22, %22 + %22, %22.join(parts)%0A        print(text)%0A%0Adef main():%0A    notebook = Not()%0A    while True:%0A        line = input()%0A        print(%22$%22 + line)%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            notebook.show()%0A        elif args%5B0%5D == %22turn_on%22:%0A            notebook.ligar()%0A        elif args%5B0%5D == %22turn_off%22:%0A            notebook.desligar()%0A        elif args%5B0%5D == %22use%22:%0A            notebook.usar(int(args%5B1%5D))%0A        elif args%5B0%5D == %22set_charger%22:%0A            notebook.setCarregador(int(args%5B1%5D))%0A        elif args%5B0%5D == %22rm_charger%22:%0A            notebook.rmCarregador()%0A        elif args%5B0%5D == %22set_battery%22:%0A            notebook.setBateria(int(args%5B1%5D))%0A        elif args%5B0%5D == %22rm_battery%22:%0A            notebook.rmBateria()%0A        else:%0A            print(%22fail: comando invalido%22)%0Amain()%0A        %0A    \n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_10-35-58",
            "content": "class Battery:\n    def __init__(self, capacity: int):\n        self.__capacity = capacity\n        self.__charge = capacity\n    \n    def getBattery(self):\n        return f\"{self.__charge}/{self.__capacity}\"\n    \n    def usingBattery(self, time: int):\n        self.__charge -=time\n        if self.__charge < 0:\n            self.__charge = 0\n\n    def carregar(self, power: int, time: int):\n        self.__charge += power * time\n        if self.__charge > self.__capacity:\n            self.__charge = self.__capacity\n\n    def hasCharge(self):\n        return self.__charge > 0\n    \n    def getCharge(self):\n        return self.__charge\n    \n    def getCapacity(self):\n        return self.__capacity\n    \nclass Charger:\n    def __init__(self, power: int):\n        self.__power = power\n    \n    def getPower(self):\n        return self.__power\n\nclass Not:\n    def __init__(self):\n        self.__on = False\n        self.__userTime = 0\n        self.__battery: Battery | None = None\n        self.__charger: Charger | None = None\n\n    def ligar(self):\n        if (self.__battery and self.__battery.hasCharge()) or self.__charger:\n            self.__on = True\n        else:\n            print(\"fail: n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        if not self.__on:\n            print(\"fail: j\u00e1 desligado\")\n            return\n        self.__on = False\n    \n    def setBateria(self, capacity: int):\n        if self.__battery:\n            print(\"fail: bateria ja conectada\")\n            return\n        self.__battery = Battery(capacity)\n\n    def rmBateria(self):\n        if not self.__battery:\n            print(\"fail: Sem bateria\")\n            return\n        print(f\"Removido {self.__battery.getBattery()}\")\n        self.__battery = None\n        if not self.__charger:\n            self.__on = False\n\n    def setCarregador(self, power: int):\n        if self.__charger:\n            print(\"fail: carregador j\u00e1 conectado\")\n            return\n        self.__charger = Charger(power)\n\n    def rmCarregador(self):\n        if not self.__charger:\n            print(\"fail: Sem carregador\")\n            return\n        \n        print(f\"Removido {self.__charger.getPower()}W\")\n        self.__charger = None\n        if not self.__battery:\n            self.__on = False\n    \n    def usar(self, time: int):\n        if not self.__on:\n            print(\"fail: desligado\")\n            return\n        time = int(time)\n        self.__userTime += time\n        \n        if self.__battery and self.__charger:\n            self.__battery.carregar(self.__charger.getPower(), time)\n        elif self.__battery:\n            start_charge = self.__battery.getCharge()\n            self.__battery.usingBattery(time)\n            if not self.__battery.hasCharge():\n                print(\"fail: descarregou\")\n                self.__on = False\n                self.__userTime -= (time - start_charge)\n        elif self.__charger:\n            pass\n        else:\n            print(\"fail: desligado\")\n            self.__on = False\n    \n    def show(self):\n        status = \"ligado\" if self.__on else \"desligado\"\n\n        text = f\"Notebook: {status}\"\n        if self.__on:\n            text += f\" por {self.__userTime} min\"\n        \n        parts = []\n        if self.__charger:\n            parts.append(f\"Carregador {self.__charger.getPower()}W\")\n        if self.__battery:\n            parts.append(f\"Bateria {self.__battery.getBattery()}\")\n        if parts:\n            text += \", \" + \", \".join(parts)\n        print(text)\n\ndef main():\n    notebook = Not()\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            notebook.show()\n        elif args[0] == \"turn_on\":\n            notebook.ligar()\n        elif args[0] == \"turn_off\":\n            notebook.desligar()\n        elif args[0] == \"use\":\n            notebook.usar(int(args[1]))\n        elif args[0] == \"set_charger\":\n            notebook.setCarregador(int(args[1]))\n        elif args[0] == \"rm_charger\":\n            notebook.rmCarregador()\n        elif args[0] == \"set_battery\":\n            notebook.setBateria(int(args[1]))\n        elif args[0] == \"rm_battery\":\n            notebook.rmBateria()\n        else:\n            print(\"fail: comando invalido\")\nmain()\n        \n    ",
            "lines": "152"
        }
    ]
}